library(geoR)
library(spatstat)
library(mapview)
##################################################
##  Exploramos los datos
# Hacer preguntas en la ppt
?meuse
?meuse.grid
?meuse.riv
##################################################
## Estructura de los datos
data(meuse)
str(meuse)
class(meuse)
coordinates(meuse) <- c("x", "y")
class(meuse)
str(meuse)
plot(meuse)
plot(meuse, asp = 1, pch = 1)
##############################################
## Descripción univariada
summary(meuse$lead)
summary(meuse$zinc)
sort(meuse$zinc)
hist(meuse$lead, breaks = seq(0, 700, by = 40), col = "lightblue",
border = "red",
main = "Concentración de Plomo por peso, ppm")
rug(meuse$lead)
boxplot((meuse$lead), horizontal = T, boxwex = 0.4,
xlab = " Concentración Plomo", main = "Meuse suelo", col = "gray80")
boxplot(meuse$lead ~ meuse$ffreq, horizontal = T, boxwex = 0.4,
col = c("skyblue",  "steelblue", "gray"),
main = "Meuse Suelos", ylab = "Frecuencia de clases de inundación",
xlab = "Plomo, ppm")
boxplot(meuse$zinc ~ meuse$ffreq, horizontal = T, boxwex = 0.4, col = c("skyblue",  "steelblue", "gray"),
main = "Meuse Suelos", ylab = "Frecuencia de clases de inundación",  xlab = "Zinc, ppm")
hist(meuse$zinc, breaks = 16)
summary(meuse$zinc)
shapiro.test(meuse$zinc)
meuse$logZn <- log10(meuse$zinc)
hist(meuse$logZn, breaks = 16)
plot(meuse$lead, meuse$zinc)
plot(meuse$lead, meuse$zinc, log = "xy")
# VARIOGRAMA EMPÍRICO O EXPERIMENTAL
ve <- variogram(logZn ~ 1, data=meuse, cutoff = 1300,width = 90)
ve # Comparar salida con plot
plot(ve, plot.numbers = T, asp=1)
###########################
vt <- vgm(psill = 0.12, model = "Sph", range = 850,nugget = 0.01)
vt
plot(ve, pl = T, model = vt)
#Ajuste automático
# fit.variogram: ajuta el modelo de variograma a un variograma empírico.
va <- fit.variogram(ve, vt)
va
plot(ve, pl = T, model = va)
#############################################################
data(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
plot(meuse.grid)
# gridded(meuse.grid) <- T #indica que el conjunto de datos es un raster
###############################################################
# Predicción  Krigin Ordinario
# Kriging ordinario
# Usualmente kriging se utiliza para predecir los píxeles (o nodos) de una malla
# regular que cubre la zona de estudio.Kriging ordinario ordinary" significa que
# (1) la variable es modelada a partir de si misma; (2) la media espacial no es
# conocida a priori, sino estimada de los datos y no existente tendencia espacial.
ok <- krige(logZn ~ 1, locations = meuse, newdata = meuse.grid, model = va)
# Visualización con los puntos de muestreo pts.s
pts.s <- list("sp.points", meuse, col="white",pch=1, cex=4*meuse$zinc/max(meuse$zinc))
print(spplot(ok, "var1.pred", asp=1, col.regions=rev(heat.colors(50)),
main="Predicción OK, log-ppm Zn",sp.layout = list(pts.s)),
split=c(1,1,2,1), more=TRUE)
pts.s <- list("sp.points", meuse, col="black", pch=20)
print(spplot(ok, zcol="var1.var",col.regions=rev(gray(seq(0,1,.01))), asp=1,
main="Varianza OK, log-ppm Zn^2",sp.layout = list(pts.s)),
split=c(2,1,2,1), more=FALSE)
#####
#####
# Predicción  Krigin Universal
# Predicción de tendencia espacial geográfica (x e y) además de estructura local.
# La tendencia se expresa en función de las coordinadoras.
k2 <- krige(logZn~ x, locations = meuse, newdata = meuse.grid, model = va)
print(spplot(k2, "var1.var", asp=1,col.regions=bpy.colors(64),
main="K2 varianza - logZn~x"))
print(spplot(k2, "var1.pred", asp=1, col.regions=bpy.colors(64),
main=" K2 predichos - logZn~x"))
#####
# Predicción  Krigin Universal
k3 <- krige(logZn~ y, locations = meuse, newdata = meuse.grid, model = va)
print(spplot(k3, "var1.var", asp=1,col.regions=topo.colors(64),
main=" K3 varianza - logZn~y"))
print(spplot(k3, "var1.pred", asp=1, col.regions=topo.colors(64),
main=" K3 predichos - logZn~y"))
#####################
k4 <- krige(logZn~x+y, locations = meuse, newdata = meuse.grid, model = va)
print(spplot(k3, "var1.var", asp=1,col.regions=bpy.colors(64), main=" K4 var1.var - Ca~area Noth"))
print(spplot(k3, "var1.pred", asp=1, col.regions=bpy.colors(64),main=" K4 var1.pred - Ca~area North"))
##################################################################
# Validación cruzada
# seleccionado x plot
val <- krige.cv(logZn ~ 1,meuse, va)
bubble(val, "residual", main = "Zn")
# Error medio de predicción, cercano a cero mejor:
mean(val$residual)
# Error cuadratico medio de predicción, mas pequeño mejor
mean(val$residual^2)
# Mean square normalized error, cercano a 1 mejor
mean(val$zscore**2)
# Creo los Pedichos pp
val$prdichos<-val$observed - val$residual
# Correlación lineal entre valores observados y predichos
cor(val$observed, val$prdichos )
# Correlación lineal entre valores observados y predichos
plot(val$observed, val$prdichos,xlab="Observados", ylab="Predichos")
######################################################################
library(automap)
ph_auto <- autoKrige(
logZn ~y,
input_data = meuse,
new_data =meuse.grid,
model = "Sph"
)
plot(ph_auto)
# Rejilla regular
require(geoR)
grid_F <- pred_grid(c(372396 ,372414), c(6455009, 6455028), by=1)
names(grid_F) <- c("X", "Y")
coordinates(grid_F) <- c("X", "Y")
gridded (grid_F) <- T
plot(grid_F, pch = 3, cex = 0.2)
meuse
RIMAS_GE
################ RIMAS wells Geostatistical Analysis ##############
################ Working with data set ################
#Temporal data set
RIMAS_TMP = read.csv("RIMAS_NA.csv")
#Spatial data set
RIMAS_SP = read.csv("RIMAS_ID.csv")
#Transform data set from daily to monthly
library(tidyverse)
#Transform in tible
RIMAS_TMP <- as_tibble(RIMAS_TMP)
#Transform character in date
RIMAS_TMP$Date <- lubridate::as_date(RIMAS_TMP$Date,  format = '%m/%d/%Y')
#Create cokumns of year, month, and day
RIMAS_TMP_YMD <- RIMAS_TMP %>%
dplyr::mutate(year = lubridate::year(Date),
month = lubridate::month(Date),
day = lubridate::day(Date))
#Resume data by mean using month and year
RIMAS_year <- RIMAS_TMP_YMD %>% group_by(year) %>%
summarise_at(vars(PIN:ALT), mean, na.rm = TRUE)
#Convert to longer
RIMAS_year_pivot <- RIMAS_year %>%
pivot_longer(cols = PIN:ALT, names_to = "well", values_to = "WatLev")
#Join to add coordinates e organizar por data
RIMAS_merge <- RIMAS_year_pivot %>%  merge(RIMAS_SP, by  = "well") %>%
arrange(year, well)
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -year)
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
##########################################################################
########################Geostatistics######################
library(gstat)
library(sp)
library(automap)
coordinates(RIMAS_GE) = ~ POINT_X+POINT_Y
#Map visualization
library(mapview)
proj4string(RIMAS_GE)=CRS("+init=epsg:4326")
mapview(RIMAS_GE, zcol = c("2018"), legend = TRUE)
#mapview(RIMAS_merge, zcol = c("NA"), legend = TRUE, map.types = "Esri.WorldImagery")
RIMAS_GE <- na.omit(RIMAS_GE)
#Variogram
#experimental
ve <- variogram(RIMAS_GE$`2016` ~ 1, data=RIMAS_GE, cutoff =150, width = 35)
plot(ve, plot.numbers = T, asp=1)
#theoretic
vt <- vgm(psill = 150, model = "Sph", range = 150,nugget = 30)
plot(ve, pl = T, model = vt)
#fit
va <- fit.variogram(ve, vt)
va
plot(ve, pl = T, model = va)
#autofit
variog = autofitVariogram(RIMAS_GE$`2016` ~ 1, RIMAS_GE)
plot(variog)
#Create a Grid
library(geoR)
grid_F <- pred_grid(c(-52.245, -48.167), c(-22.60611, -20.34111), by=0.01)
names(grid_F) <- c("POINT_X", "POINT_Y")
coordinates(grid_F) <- c("POINT_X", "POINT_Y")
gridded (grid_F) <- T
proj4string(grid_F)=CRS("+init=epsg:4326")
#plot(grid_F, pch = 3, cex = 0.2)
#kriging
#ordinary kriging (OK)
ok <- gstat::krige(RIMAS_GE$`2016` ~ 1, RIMAS_GE,grid_F, model = vt)
#print
print(spplot(ok, "var1.pred", asp=1, col.regions=rev(heat.colors(50)),
main="Oridinary Kriging, GW depth (m)"), )
print(spplot(ok, "var1.var", asp=1, col.regions=rev(heat.colors(50)),
main="Variance"))
# cross validation
#Export OK to raster
vc_ok <- terra::vect(ok)
terra::rasterize(vc_ok, )
meuse
RIMAS_GE
mapview(RIMAS_GE, zcol = c("2016"), legend = TRUE)
#ordinary kriging (OK)
ok <- krige(RIMAS_GE$`2016` ~ 1, RIMAS_GE,grid_F, model = vt)
#print
print(spplot(ok, "var1.pred", asp=1, col.regions=rev(heat.colors(50)),
main="Oridinary Kriging, GW depth (m)"), )
print(spplot(ok, "var1.var", asp=1, col.regions=rev(heat.colors(50)),
main="Variance"))
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE,grid_F, model = vt)
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = vt)
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = va)
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = ve)
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = va)
val <- krige.cv(logZn ~ 1,meuse, va)
val
RIMAS_GE$`2016`
RIMAS_GE
view(RIMAS_GE)
RIMAS_TMP = read.csv("RIMAS_NA.csv")
RIMAS_SP = read.csv("RIMAS_ID.csv")
library(tidyverse)
#Transform in tible
RIMAS_TMP <- as_tibble(RIMAS_TMP)
#Transform character in date
RIMAS_TMP$Date <- lubridate::as_date(RIMAS_TMP$Date,  format = '%m/%d/%Y')
#Create cokumns of year, month, and day
RIMAS_TMP_YMD <- RIMAS_TMP %>%
dplyr::mutate(year = lubridate::year(Date),
month = lubridate::month(Date),
day = lubridate::day(Date))
#Resume data by mean using month and year
RIMAS_year <- RIMAS_TMP_YMD %>% group_by(year) %>%
summarise_at(vars(PIN:ALT), mean, na.rm = TRUE)
#Convert to longer
RIMAS_year_pivot <- RIMAS_year %>%
pivot_longer(cols = PIN:ALT, names_to = "well", values_to = "WatLev")
#Join to add coordinates e organizar por data
RIMAS_merge <- RIMAS_year_pivot %>%  merge(RIMAS_SP, by  = "well") %>%
arrange(year, well)
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -month)
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto)
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
library(gstat)
library(sp)
library(automap)
coordinates(RIMAS_GE) = ~ POINT_X+POINT_Y
library(mapview)
proj4string(RIMAS_GE)=CRS("+init=epsg:4326")
mapview(RIMAS_GE, zcol = c("2016"), legend = TRUE)
RIMAS_GE <- na.omit(RIMAS_GE)
#experimental
ve <- variogram(RIMAS_GE$`2016` ~ 1, data=RIMAS_GE, cutoff =150, width = 35)
plot(ve, plot.numbers = T, asp=1)
#theoretic
vt <- vgm(psill = 150, model = "Sph", range = 150,nugget = 30)
plot(ve, pl = T, model = vt)
#fit
va <- fit.variogram(ve, vt)
va
plot(ve, pl = T, model = va)
#autofit
variog = autofitVariogram(RIMAS_GE$`2016` ~ 1, RIMAS_GE)
plot(variog)
#Create a Grid
library(geoR)
grid_F <- pred_grid(c(-52.245, -48.167), c(-22.60611, -20.34111), by=0.01)
names(grid_F) <- c("POINT_X", "POINT_Y")
coordinates(grid_F) <- c("POINT_X", "POINT_Y")
gridded (grid_F) <- T
proj4string(grid_F)=CRS("+init=epsg:4326")
#ordinary kriging (OK)
ok <- krige(RIMAS_GE$`2016` ~ 1, RIMAS_GE,grid_F, model = vt)
#print
print(spplot(ok, "var1.pred", asp=1, col.regions=rev(heat.colors(50)),
main="Oridinary Kriging, GW depth (m)"), )
print(spplot(ok, "var1.var", asp=1, col.regions=rev(heat.colors(50)),
main="Variance"))
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = va)
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = va)
RIMAS_GE$`2016`
RIMAS_TMP = read.csv("RIMAS_NA.csv")
RIMAS_SP = read.csv("RIMAS_ID.csv")
library(tidyverse)
#Transform in tible
RIMAS_TMP <- as_tibble(RIMAS_TMP)
#Transform character in date
RIMAS_TMP$Date <- lubridate::as_date(RIMAS_TMP$Date,  format = '%m/%d/%Y')
#Create cokumns of year, month, and day
RIMAS_TMP_YMD <- RIMAS_TMP %>%
dplyr::mutate(year = lubridate::year(Date),
month = lubridate::month(Date),
day = lubridate::day(Date))
#Resume data by mean using month and year
RIMAS_year <- RIMAS_TMP_YMD %>% group_by(year) %>%
summarise_at(vars(PIN:ALT), mean, na.rm = TRUE)
#Convert to longer
RIMAS_year_pivot <- RIMAS_year %>%
pivot_longer(cols = PIN:ALT, names_to = "well", values_to = "WatLev")
#Join to add coordinates e organizar por data
RIMAS_merge <- RIMAS_year_pivot %>%  merge(RIMAS_SP, by  = "well") %>%
arrange(year, well)
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -Date)
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
library(gstat)
library(sp)
library(automap)
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Year, values_from = WatLev)
RIMAS_TMP = read.csv("RIMAS_NA.csv")
RIMAS_SP = read.csv("RIMAS_ID.csv")
library(tidyverse)
#Transform in tible
RIMAS_TMP <- as_tibble(RIMAS_TMP)
#Transform character in date
RIMAS_TMP$Date <- lubridate::as_date(RIMAS_TMP$Date,  format = '%m/%d/%Y')
#Create cokumns of year, month, and day
RIMAS_TMP_YMD <- RIMAS_TMP %>%
dplyr::mutate(year = lubridate::year(Date),
month = lubridate::month(Date),
day = lubridate::day(Date))
#Resume data by mean using month and year
RIMAS_year <- RIMAS_TMP_YMD %>% group_by(year) %>%
summarise_at(vars(PIN:ALT), mean, na.rm = TRUE)
#Convert to longer
RIMAS_year_pivot <- RIMAS_year %>%
pivot_longer(cols = PIN:ALT, names_to = "well", values_to = "WatLev")
#Join to add coordinates e organizar por data
RIMAS_merge <- RIMAS_year_pivot %>%  merge(RIMAS_SP, by  = "well") %>%
arrange(year, well)
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -year)
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
RIMAS_GE
RIMAS_SP = read.csv("RIMAS_ID.csv")
#Transform data set from daily to monthly
library(tidyverse)
#Transform in tible
RIMAS_TMP <- as_tibble(RIMAS_TMP)
#Transform character in date
RIMAS_TMP$Date <- lubridate::as_date(RIMAS_TMP$Date,  format = '%m/%d/%Y')
#Create cokumns of year, month, and day
RIMAS_TMP_YMD <- RIMAS_TMP %>%
dplyr::mutate(year = lubridate::year(Date),
month = lubridate::month(Date),
day = lubridate::day(Date))
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -year, -NA)
#Join to add coordinates e organizar por data
RIMAS_merge <- RIMAS_year_pivot %>%  merge(RIMAS_SP, by  = "well") %>%
arrange(year, well)
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -year)
RIMAS_merge
RIMAS_GE <- na.omit(RIMAS_GE)
RIMAS_GE
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
RIMAS_GE <- RIMAS_GE[,-131:143]
RIMAS_GE <- RIMAS_GE[-131:-143,]
RIMAS_GE
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -year)
#Join to add coordinates e organizar por data
RIMAS_merge <- RIMAS_year_pivot %>%  merge(RIMAS_SP, by  = "well") %>%
arrange(year, well)
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -year)
RIMAS_merge <- RIMAS_merge[-131:-143,]
RIMAS_merge
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
library(gstat)
library(sp)
library(automap)
coordinates(RIMAS_GE) = ~ POINT_X+POINT_Y
library(mapview)
proj4string(RIMAS_GE)=CRS("+init=epsg:4326")
mapview(RIMAS_GE, zcol = c("2016"), legend = TRUE)
#experimental
ve <- variogram(RIMAS_GE$`2016` ~ 1, data=RIMAS_GE, cutoff =150, width = 35)
plot(ve, plot.numbers = T, asp=1)
#theoretic
vt <- vgm(psill = 150, model = "Sph", range = 150,nugget = 30)
plot(ve, pl = T, model = vt)
#fit
va <- fit.variogram(ve, vt)
va
plot(ve, pl = T, model = va)
#autofit
variog = autofitVariogram(RIMAS_GE$`2016` ~ 1, RIMAS_GE)
plot(variog)
#Create a Grid
library(geoR)
grid_F <- pred_grid(c(-52.245, -48.167), c(-22.60611, -20.34111), by=0.01)
names(grid_F) <- c("POINT_X", "POINT_Y")
coordinates(grid_F) <- c("POINT_X", "POINT_Y")
gridded (grid_F) <- T
proj4string(grid_F)=CRS("+init=epsg:4326")
#ordinary kriging (OK)
ok <- krige(RIMAS_GE$`2016` ~ 1, RIMAS_GE,grid_F, model = vt)
#print
print(spplot(ok, "var1.pred", asp=1, col.regions=rev(heat.colors(50)),
main="Oridinary Kriging, GW depth (m)"), )
print(spplot(ok, "var1.var", asp=1, col.regions=rev(heat.colors(50)),
main="Variance"))
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = va)
################ RIMAS wells Geostatistical Analysis ##############
################ Working with data set ################
#Temporal data set
RIMAS_TMP = read.csv("RIMAS_NA.csv")
#Spatial data set
RIMAS_SP = read.csv("RIMAS_ID.csv")
#Transform data set from daily to monthly
library(tidyverse)
#Transform in tible
RIMAS_TMP <- as_tibble(RIMAS_TMP)
#Transform character in date
RIMAS_TMP$Date <- lubridate::as_date(RIMAS_TMP$Date,  format = '%m/%d/%Y')
#Create cokumns of year, month, and day
RIMAS_TMP_YMD <- RIMAS_TMP %>%
dplyr::mutate(year = lubridate::year(Date),
month = lubridate::month(Date),
day = lubridate::day(Date))
#Resume data by mean using month and year
RIMAS_year <- RIMAS_TMP_YMD %>% group_by(year) %>%
summarise_at(vars(PIN:ALT), mean, na.rm = TRUE)
#Convert to longer
RIMAS_year_pivot <- RIMAS_year %>%
pivot_longer(cols = PIN:ALT, names_to = "well", values_to = "WatLev")
#Join to add coordinates e organizar por data
RIMAS_merge <- RIMAS_year_pivot %>%  merge(RIMAS_SP, by  = "well") %>%
arrange(year, well)
RIMAS_merge <-  within(RIMAS_merge, Date <- sprintf("%d", year))
RIMAS_merge <- select(RIMAS_merge, -ne, -idt_ponto, -year)
RIMAS_merge <- RIMAS_merge[-131:-143,]
#Convert to wider
RIMAS_GE <- pivot_wider(RIMAS_merge, names_from = Date, values_from = WatLev)
##########################################################################
########################Geostatistics######################
library(gstat)
library(sp)
library(automap)
coordinates(RIMAS_GE) = ~ POINT_X+POINT_Y
#Map visualization
library(mapview)
proj4string(RIMAS_GE)=CRS("+init=epsg:4326")
mapview(RIMAS_GE, zcol = c("2016"), legend = TRUE)
#mapview(RIMAS_merge, zcol = c("NA"), legend = TRUE, map.types = "Esri.WorldImagery")
#Variogram
#experimental
ve <- variogram(RIMAS_GE$`2016` ~ 1, data=RIMAS_GE, cutoff =150, width = 35)
plot(ve, plot.numbers = T, asp=1)
#theoretic
vt <- vgm(psill = 150, model = "Sph", range = 150,nugget = 30)
plot(ve, pl = T, model = vt)
#fit
va <- fit.variogram(ve, vt)
va
plot(ve, pl = T, model = va)
#autofit
variog = autofitVariogram(RIMAS_GE$`2016` ~ 1, RIMAS_GE)
plot(variog)
#Create a Grid
library(geoR)
grid_F <- pred_grid(c(-52.245, -48.167), c(-22.60611, -20.34111), by=0.01)
names(grid_F) <- c("POINT_X", "POINT_Y")
coordinates(grid_F) <- c("POINT_X", "POINT_Y")
gridded (grid_F) <- T
proj4string(grid_F)=CRS("+init=epsg:4326")
#plot(grid_F, pch = 3, cex = 0.2)
#kriging
#ordinary kriging (OK)
ok <- krige(RIMAS_GE$`2016` ~ 1, RIMAS_GE,grid_F, model = vt)
#print
print(spplot(ok, "var1.pred", asp=1, col.regions=rev(heat.colors(50)),
main="Oridinary Kriging, GW depth (m)"), )
print(spplot(ok, "var1.var", asp=1, col.regions=rev(heat.colors(50)),
main="Variance"))
# cross validation
krige.cv(RIMAS_GE$`2016` ~ 1, RIMAS_GE, model = va)
# Mean prediction error, close to zero better:
mean(residual$val)
# Mean square prediction error, smaller the better
mean(residual$val^2)
# Mean square normalized error, close to 1 best
mean(val$zscore**2)
val$predicted <-val$observed - val$residual
# Linear correlation between observed and predicted values
cor(val$observed, val$predicted)
# Linear correlation between observed and predicted values
plot (val$observed, val$predicted, xlab = "Observed", ylab = "Predicted")
